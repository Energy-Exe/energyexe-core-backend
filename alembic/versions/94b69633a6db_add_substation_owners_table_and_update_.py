"""Add substation_owners table and update relationships

Revision ID: 94b69633a6db
Revises: 3fbc96f48c1d
Create Date: 2025-10-30 22:37:56.853607

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '94b69633a6db'
down_revision = '3fbc96f48c1d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create substation_owners table
    op.create_table('substation_owners',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('substation_id', sa.Integer(), nullable=False),
        sa.Column('owner_id', sa.Integer(), nullable=False),
        sa.Column('ownership_percentage', sa.DECIMAL(precision=5, scale=2), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
        sa.ForeignKeyConstraint(['substation_id'], ['substations.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_substation_owners_id'), 'substation_owners', ['id'], unique=False)

    op.drop_index(op.f('ix_import_job_executions_created_at'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_job_executions_id'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_job_executions_job_name'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_job_executions_job_type'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_job_executions_source'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_job_executions_status'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_jobs_latest'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_jobs_recent'), table_name='import_job_executions')
    op.drop_index(op.f('ix_import_jobs_source_status'), table_name='import_job_executions')
    op.drop_table('import_job_executions')
    op.drop_constraint(op.f('uq_generation_data_raw_source_identifier_period'), 'generation_data_raw', type_='unique')
    op.drop_index(op.f('ix_generation_units_code'), table_name='generation_units')
    op.create_index(op.f('ix_generation_units_code'), 'generation_units', ['code'], unique=True)
    op.drop_constraint(op.f('substations_owner_id_fkey'), 'substations', type_='foreignkey')
    op.drop_column('substations', 'owner_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop substation_owners table
    op.drop_index(op.f('ix_substation_owners_id'), table_name='substation_owners')
    op.drop_table('substation_owners')

    op.add_column('substations', sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('substations_owner_id_fkey'), 'substations', 'owners', ['owner_id'], ['id'])
    op.drop_index(op.f('ix_generation_units_code'), table_name='generation_units')
    op.create_index(op.f('ix_generation_units_code'), 'generation_units', ['code'], unique=False)
    op.create_unique_constraint(op.f('uq_generation_data_raw_source_identifier_period'), 'generation_data_raw', ['source', 'identifier', 'period_start'], postgresql_nulls_not_distinct=False)
    op.create_table('import_job_executions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('import_start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('import_end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('records_imported', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_updated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('api_calls_made', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retry_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_retries', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name=op.f('import_job_executions_created_by_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('import_job_executions_pkey'))
    )
    op.create_index(op.f('ix_import_jobs_source_status'), 'import_job_executions', ['source', 'status'], unique=False)
    op.create_index(op.f('ix_import_jobs_recent'), 'import_job_executions', ['created_at'], unique=False)
    op.create_index(op.f('ix_import_jobs_latest'), 'import_job_executions', ['job_name', 'started_at'], unique=False)
    op.create_index(op.f('ix_import_job_executions_status'), 'import_job_executions', ['status'], unique=False)
    op.create_index(op.f('ix_import_job_executions_source'), 'import_job_executions', ['source'], unique=False)
    op.create_index(op.f('ix_import_job_executions_job_type'), 'import_job_executions', ['job_type'], unique=False)
    op.create_index(op.f('ix_import_job_executions_job_name'), 'import_job_executions', ['job_name'], unique=False)
    op.create_index(op.f('ix_import_job_executions_id'), 'import_job_executions', ['id'], unique=False)
    op.create_index(op.f('ix_import_job_executions_created_at'), 'import_job_executions', ['created_at'], unique=False)
    # ### end Alembic commands ### 