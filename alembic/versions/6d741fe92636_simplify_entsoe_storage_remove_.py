"""Simplify ENTSOE storage - remove unnecessary tables and update field sizes

Revision ID: 6d741fe92636
Revises: fc43705b1340
Create Date: 2025-08-17 13:03:52.330636

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6d741fe92636'
down_revision = 'fc43705b1340'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('entsoe_fetch_history')
    op.drop_table('entsoe_area_metadata')
    op.drop_index(op.f('idx_coverage_area_type'), table_name='entsoe_data_coverage')
    op.drop_index(op.f('idx_coverage_dates'), table_name='entsoe_data_coverage')
    op.drop_index(op.f('idx_coverage_windfarm'), table_name='entsoe_data_coverage')
    op.drop_table('entsoe_data_coverage')
    op.alter_column('entsoe_generation_data', 'area_code',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('entsoe_generation_data', 'production_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('entsoe_generation_data', 'production_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('entsoe_generation_data', 'area_code',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.create_table('entsoe_data_coverage',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('area_code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('production_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('windfarm_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('record_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('entsoe_data_coverage_pkey'))
    )
    op.create_index(op.f('idx_coverage_windfarm'), 'entsoe_data_coverage', ['windfarm_id'], unique=False)
    op.create_index(op.f('idx_coverage_dates'), 'entsoe_data_coverage', ['start_date', 'end_date'], unique=False)
    op.create_index(op.f('idx_coverage_area_type'), 'entsoe_data_coverage', ['area_code', 'production_type'], unique=False)
    op.create_table('entsoe_area_metadata',
    sa.Column('code', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('country_code', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('code', name=op.f('entsoe_area_metadata_pkey'))
    )
    op.create_table('entsoe_fetch_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('area_codes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('production_types', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('fetch_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('entsoe_fetch_history_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('entsoe_fetch_history_pkey'))
    )
    # ### end Alembic commands ### 